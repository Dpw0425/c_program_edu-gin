// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: question.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetQuestionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionListRequestMultiError, or nil if none found.
func (m *GetQuestionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	// no validation rules for Page

	// no validation rules for Number

	if len(errors) > 0 {
		return GetQuestionListRequestMultiError(errors)
	}

	return nil
}

// GetQuestionListRequestMultiError is an error wrapping multiple validation
// errors returned by GetQuestionListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionListRequestMultiError) AllErrors() []error { return m }

// GetQuestionListRequestValidationError is the validation error returned by
// GetQuestionListRequest.Validate if the designated constraints aren't met.
type GetQuestionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionListRequestValidationError) ErrorName() string {
	return "GetQuestionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionListRequestValidationError{}

// Validate checks the field values on GetQuestionListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionListResponseMultiError, or nil if none found.
func (m *GetQuestionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuestionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionListResponseValidationError{
						field:  fmt.Sprintf("QuestionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionListResponseValidationError{
						field:  fmt.Sprintf("QuestionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionListResponseValidationError{
					field:  fmt.Sprintf("QuestionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetQuestionListResponseMultiError(errors)
	}

	return nil
}

// GetQuestionListResponseMultiError is an error wrapping multiple validation
// errors returned by GetQuestionListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionListResponseMultiError) AllErrors() []error { return m }

// GetQuestionListResponseValidationError is the validation error returned by
// GetQuestionListResponse.Validate if the designated constraints aren't met.
type GetQuestionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionListResponseValidationError) ErrorName() string {
	return "GetQuestionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionListResponseValidationError{}

// Validate checks the field values on GetQuestionListResponse_QuestionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetQuestionListResponse_QuestionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionListResponse_QuestionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetQuestionListResponse_QuestionItemMultiError, or nil if none found.
func (m *GetQuestionListResponse_QuestionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionListResponse_QuestionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Degree

	// no validation rules for PassingRate

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return GetQuestionListResponse_QuestionItemMultiError(errors)
	}

	return nil
}

// GetQuestionListResponse_QuestionItemMultiError is an error wrapping multiple
// validation errors returned by
// GetQuestionListResponse_QuestionItem.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionListResponse_QuestionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionListResponse_QuestionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionListResponse_QuestionItemMultiError) AllErrors() []error { return m }

// GetQuestionListResponse_QuestionItemValidationError is the validation error
// returned by GetQuestionListResponse_QuestionItem.Validate if the designated
// constraints aren't met.
type GetQuestionListResponse_QuestionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionListResponse_QuestionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionListResponse_QuestionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionListResponse_QuestionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionListResponse_QuestionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionListResponse_QuestionItemValidationError) ErrorName() string {
	return "GetQuestionListResponse_QuestionItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionListResponse_QuestionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionListResponse_QuestionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionListResponse_QuestionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionListResponse_QuestionItemValidationError{}
