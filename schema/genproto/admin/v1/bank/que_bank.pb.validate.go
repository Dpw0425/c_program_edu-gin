// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: que_bank.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetQuestionInBankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionInBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionInBankRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionInBankRequestMultiError, or nil if none found.
func (m *GetQuestionInBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionInBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Number

	// no validation rules for Id

	if len(errors) > 0 {
		return GetQuestionInBankRequestMultiError(errors)
	}

	return nil
}

// GetQuestionInBankRequestMultiError is an error wrapping multiple validation
// errors returned by GetQuestionInBankRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionInBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionInBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionInBankRequestMultiError) AllErrors() []error { return m }

// GetQuestionInBankRequestValidationError is the validation error returned by
// GetQuestionInBankRequest.Validate if the designated constraints aren't met.
type GetQuestionInBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionInBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionInBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionInBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionInBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionInBankRequestValidationError) ErrorName() string {
	return "GetQuestionInBankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionInBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionInBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionInBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionInBankRequestValidationError{}

// Validate checks the field values on GetQuestionInBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionInBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionInBankResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionInBankResponseMultiError, or nil if none found.
func (m *GetQuestionInBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionInBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuestionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionInBankResponseValidationError{
						field:  fmt.Sprintf("QuestionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionInBankResponseValidationError{
						field:  fmt.Sprintf("QuestionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionInBankResponseValidationError{
					field:  fmt.Sprintf("QuestionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetQuestionInBankResponseMultiError(errors)
	}

	return nil
}

// GetQuestionInBankResponseMultiError is an error wrapping multiple validation
// errors returned by GetQuestionInBankResponse.ValidateAll() if the
// designated constraints aren't met.
type GetQuestionInBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionInBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionInBankResponseMultiError) AllErrors() []error { return m }

// GetQuestionInBankResponseValidationError is the validation error returned by
// GetQuestionInBankResponse.Validate if the designated constraints aren't met.
type GetQuestionInBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionInBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionInBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionInBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionInBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionInBankResponseValidationError) ErrorName() string {
	return "GetQuestionInBankResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionInBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionInBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionInBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionInBankResponseValidationError{}

// Validate checks the field values on GetQuestionBesideBankRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionBesideBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionBesideBankRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuestionBesideBankRequestMultiError, or nil if none found.
func (m *GetQuestionBesideBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionBesideBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Number

	// no validation rules for Id

	if len(errors) > 0 {
		return GetQuestionBesideBankRequestMultiError(errors)
	}

	return nil
}

// GetQuestionBesideBankRequestMultiError is an error wrapping multiple
// validation errors returned by GetQuestionBesideBankRequest.ValidateAll() if
// the designated constraints aren't met.
type GetQuestionBesideBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionBesideBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionBesideBankRequestMultiError) AllErrors() []error { return m }

// GetQuestionBesideBankRequestValidationError is the validation error returned
// by GetQuestionBesideBankRequest.Validate if the designated constraints
// aren't met.
type GetQuestionBesideBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionBesideBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionBesideBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionBesideBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionBesideBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionBesideBankRequestValidationError) ErrorName() string {
	return "GetQuestionBesideBankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionBesideBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionBesideBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionBesideBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionBesideBankRequestValidationError{}

// Validate checks the field values on GetQuestionBesideBankResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuestionBesideBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuestionBesideBankResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetQuestionBesideBankResponseMultiError, or nil if none found.
func (m *GetQuestionBesideBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionBesideBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuestionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionBesideBankResponseValidationError{
						field:  fmt.Sprintf("QuestionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionBesideBankResponseValidationError{
						field:  fmt.Sprintf("QuestionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionBesideBankResponseValidationError{
					field:  fmt.Sprintf("QuestionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetQuestionBesideBankResponseMultiError(errors)
	}

	return nil
}

// GetQuestionBesideBankResponseMultiError is an error wrapping multiple
// validation errors returned by GetQuestionBesideBankResponse.ValidateAll()
// if the designated constraints aren't met.
type GetQuestionBesideBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionBesideBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionBesideBankResponseMultiError) AllErrors() []error { return m }

// GetQuestionBesideBankResponseValidationError is the validation error
// returned by GetQuestionBesideBankResponse.Validate if the designated
// constraints aren't met.
type GetQuestionBesideBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionBesideBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionBesideBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionBesideBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionBesideBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionBesideBankResponseValidationError) ErrorName() string {
	return "GetQuestionBesideBankResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionBesideBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionBesideBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionBesideBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionBesideBankResponseValidationError{}

// Validate checks the field values on GetQuestionInBankResponse_QuestionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetQuestionInBankResponse_QuestionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetQuestionInBankResponse_QuestionItem with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetQuestionInBankResponse_QuestionItemMultiError, or nil if none found.
func (m *GetQuestionInBankResponse_QuestionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionInBankResponse_QuestionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Degree

	// no validation rules for PassingRate

	// no validation rules for OwnerId

	// no validation rules for Content

	// no validation rules for Answer

	// no validation rules for Status

	if len(errors) > 0 {
		return GetQuestionInBankResponse_QuestionItemMultiError(errors)
	}

	return nil
}

// GetQuestionInBankResponse_QuestionItemMultiError is an error wrapping
// multiple validation errors returned by
// GetQuestionInBankResponse_QuestionItem.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionInBankResponse_QuestionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionInBankResponse_QuestionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionInBankResponse_QuestionItemMultiError) AllErrors() []error { return m }

// GetQuestionInBankResponse_QuestionItemValidationError is the validation
// error returned by GetQuestionInBankResponse_QuestionItem.Validate if the
// designated constraints aren't met.
type GetQuestionInBankResponse_QuestionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionInBankResponse_QuestionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionInBankResponse_QuestionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionInBankResponse_QuestionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionInBankResponse_QuestionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionInBankResponse_QuestionItemValidationError) ErrorName() string {
	return "GetQuestionInBankResponse_QuestionItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionInBankResponse_QuestionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionInBankResponse_QuestionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionInBankResponse_QuestionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionInBankResponse_QuestionItemValidationError{}

// Validate checks the field values on
// GetQuestionBesideBankResponse_QuestionItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetQuestionBesideBankResponse_QuestionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetQuestionBesideBankResponse_QuestionItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetQuestionBesideBankResponse_QuestionItemMultiError, or nil if none found.
func (m *GetQuestionBesideBankResponse_QuestionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionBesideBankResponse_QuestionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Degree

	// no validation rules for PassingRate

	// no validation rules for OwnerId

	// no validation rules for Content

	// no validation rules for Answer

	// no validation rules for Status

	if len(errors) > 0 {
		return GetQuestionBesideBankResponse_QuestionItemMultiError(errors)
	}

	return nil
}

// GetQuestionBesideBankResponse_QuestionItemMultiError is an error wrapping
// multiple validation errors returned by
// GetQuestionBesideBankResponse_QuestionItem.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionBesideBankResponse_QuestionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionBesideBankResponse_QuestionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionBesideBankResponse_QuestionItemMultiError) AllErrors() []error { return m }

// GetQuestionBesideBankResponse_QuestionItemValidationError is the validation
// error returned by GetQuestionBesideBankResponse_QuestionItem.Validate if
// the designated constraints aren't met.
type GetQuestionBesideBankResponse_QuestionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionBesideBankResponse_QuestionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionBesideBankResponse_QuestionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionBesideBankResponse_QuestionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionBesideBankResponse_QuestionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionBesideBankResponse_QuestionItemValidationError) ErrorName() string {
	return "GetQuestionBesideBankResponse_QuestionItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionBesideBankResponse_QuestionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionBesideBankResponse_QuestionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionBesideBankResponse_QuestionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionBesideBankResponse_QuestionItemValidationError{}
